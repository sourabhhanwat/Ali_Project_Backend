# Generated by Django 3.1.1 on 2020-09-28 16:26

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    # dependencies = [
    #     ('auth', '0012_alter_user_first_name_max_length'),
    # ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='BracingType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='NumberOfLegsType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Platform',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=250)),
                ('description', models.CharField(blank=True, default='', max_length=500)),
                ('field_name', models.CharField(blank=True, default='', max_length=250)),
                ('manned', models.BooleanField(default=False)),
                ('distance_to_shore', models.DecimalField(decimal_places=5, default=0, max_digits=10, verbose_name='distance to shore (Km)')),
                ('distance_to_shipping_lane', models.DecimalField(decimal_places=5, default=0, max_digits=10, verbose_name='distance to shipping lane (Km)')),
                ('api_seismic_zone', models.CharField(blank=True, default='', max_length=250, verbose_name='api seismic zone')),
                ('number_of_bays', models.IntegerField(default=0, verbose_name='number of bays')),
                ('number_of_main_piles', models.IntegerField(default=0, verbose_name='number of main piles')),
                ('number_of_skirt_piles', models.IntegerField(default=0, verbose_name='number of skirt piles')),
                ('number_of_decks', models.IntegerField(default=0, verbose_name='number of decks')),
                ('deck_weight', models.DecimalField(decimal_places=5, default=0, max_digits=10, verbose_name='deck weight (mt)')),
                ('pile_penetration_depth', models.DecimalField(decimal_places=5, default=0, max_digits=10, verbose_name='pile penetration depth (m)')),
                ('jacket_repaired', models.BooleanField(default=False, verbose_name='jacket repaired')),
                ('deck_extension', models.BooleanField(default=False, verbose_name='deck extension')),
                ('crane', models.BooleanField(default=False, verbose_name='crane')),
                ('helideck', models.BooleanField(default=False, verbose_name='helideck')),
                ('boatlanding', models.BooleanField(default=False, verbose_name='boatlanding')),
                ('anode_grade', models.IntegerField(default=0, verbose_name='anode grade')),
                ('design_date', models.DateTimeField(blank=True, null=True, verbose_name='[ILOF-2] design date')),
                ('platform_installation_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='[ILOF-3] platform installation date')),
                ('environmental_consequence_description', models.CharField(blank=True, max_length=300, null=True)),
                ('economic_consequence_description', models.CharField(blank=True, max_length=300, null=True)),
                ('environmental_consequence_category', models.CharField(blank=True, default='A', max_length=10, null=True)),
                ('economic_consequence_category', models.CharField(blank=True, default='A', max_length=10, null=True)),
                ('level_1_last_inspection_date', models.DateField(blank=True, null=True)),
                ('level_2_last_inspection_date', models.DateField(blank=True, null=True)),
                ('level_3_last_inspection_date', models.DateField(blank=True, null=True)),
                ('rbui_assessment_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='[ILOF-12] rbui assessment date')),
                ('level_1_selected_inspection_interval_for_next_inspection', models.IntegerField(blank=True, default=0, null=True, verbose_name='[ILOF-76] level 1 selected inspection interval for next inspection')),
                ('level_2_selected_inspection_interval_for_next_inspection', models.IntegerField(blank=True, default=0, null=True, verbose_name='[ILOF-76] level 2 selected inspection interval for next inspection')),
                ('level_3_selected_inspection_interval_for_next_inspection', models.IntegerField(blank=True, default=0, null=True, verbose_name='[ILOF-76] level 3 selected inspection interval for next inspection')),
                ('bracing_type', models.ForeignKey(default=1, on_delete=django.db.models.deletion.DO_NOTHING, to='core.bracingtype', verbose_name='[ILOF-5] bracing type')),
                ('number_of_legs_type', models.ForeignKey(default=1, on_delete=django.db.models.deletion.DO_NOTHING, to='core.numberoflegstype', verbose_name='[ILOF-4] number of legs')),
            ],
        ),
        migrations.CreateModel(
            name='PlatformMannedStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('ranking', models.CharField(default='A', max_length=1)),
                ('description', models.CharField(default='', max_length=600)),
            ],
        ),
        migrations.CreateModel(
            name='PlatformType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=250)),
                ('description', models.CharField(blank=True, default='', max_length=500)),
                ('start_date', models.DateTimeField(auto_now_add=True, null=True)),
                ('end_date', models.DateTimeField(auto_now_add=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Site',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=250)),
                ('description', models.CharField(blank=True, default='', max_length=500)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='project_site', to='core.project')),
            ],
        ),
        migrations.CreateModel(
            name='UnprotectedAppurtenances',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number_of_unprotected_gas_riser', models.IntegerField(blank=True, null=True, verbose_name='[ILOF-41] number of unprotected gas riser')),
                ('number_of_unprotected_conductor', models.IntegerField(blank=True, null=True, verbose_name='[ILOF-43] number of unprotected conductor')),
                ('platform', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='unprotected_appurtenances', to='core.platform')),
            ],
        ),
        migrations.CreateModel(
            name='SiteOwnership',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assign_time', models.DateTimeField(auto_now=True)),
                ('access_type', models.CharField(choices=[('V', 'View'), ('M', 'Modify')], default='V', max_length=1)),
                ('site', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.site')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='site',
            name='users',
            field=models.ManyToManyField(through='core.SiteOwnership', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='ShallowGas',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('shallow_gas_effect_detected', models.BooleanField(default=False, verbose_name='[ILOF-8] shallow gas effect detected?')),
                ('shallow_gas_monitored', models.BooleanField(default=False, verbose_name='[ILOF-9] shallow gas monitored?')),
                ('platform', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='shallow_gas', to='core.platform')),
            ],
        ),
        migrations.CreateModel(
            name='Scour',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('design_scour_depth', models.DecimalField(decimal_places=5, default=0, max_digits=10, verbose_name='[ILOF-32] design scour depth (m)')),
                ('measured_scour_depth_during_inspection', models.DecimalField(blank=True, decimal_places=5, max_digits=10, null=True, verbose_name='[ILOF-34] measured scoured depth during inspection (m)')),
                ('platform', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='scour', to='core.platform')),
            ],
        ),
        migrations.CreateModel(
            name='ReserveStrengthRatioScore',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reserve_strength_ratio', models.DecimalField(decimal_places=5, default=0, max_digits=10, verbose_name='[ILOF-61] reserve strength ratio (rsr)')),
                ('rsr_override', models.BooleanField(default=False, verbose_name='[ILOF-62] rsr override')),
                ('platform', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='reserve_strength_ratio_score', to='core.platform')),
            ],
        ),
        migrations.CreateModel(
            name='ProjectOwnership',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assign_time', models.DateTimeField(auto_now=True)),
                ('access_type', models.CharField(choices=[('V', 'View'), ('M', 'Modify')], default='V', max_length=1)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='project_name', to='core.project')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='project',
            name='users',
            field=models.ManyToManyField(through='core.ProjectOwnership', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='PlatformOwnership',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assign_time', models.DateTimeField(auto_now=True)),
                ('access_type', models.CharField(choices=[('V', 'View'), ('M', 'Modify')], default='V', max_length=1)),
                ('platform', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.platform')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='platform',
            name='platform_manned_status',
            field=models.ForeignKey(default=2, on_delete=django.db.models.deletion.DO_NOTHING, to='core.platformmannedstatus', verbose_name='[ILOF-63] platform manned status'),
        ),
        migrations.AddField(
            model_name='platform',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='project_platform', to='core.project'),
        ),
        migrations.AddField(
            model_name='platform',
            name='users',
            field=models.ManyToManyField(through='core.PlatformOwnership', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='MechanicalDamage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number_of_damaged_members', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(limit_value=0)], verbose_name="[ILOF-16] number of damaged members in last inspection (if not known n left empty, if no damaged members found during inspection enter '0')")),
                ('platform', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='mechanical_damage', to='core.platform')),
            ],
        ),
        migrations.CreateModel(
            name='MarineGrowth',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('marine_growth_depths_from_el', models.DecimalField(blank=True, decimal_places=5, max_digits=10, null=True, verbose_name='[ILOF-29] marine growth depths')),
                ('marine_growth_depths_to_el', models.DecimalField(blank=True, decimal_places=5, max_digits=10, null=True, verbose_name='[ILOF-29] marine growth depths')),
                ('marine_growth_inspected_thickness', models.DecimalField(decimal_places=5, max_digits=10, verbose_name='[ILOF-30] marine growth inspected thickness')),
                ('marine_growth_design_thickness', models.DecimalField(decimal_places=5, max_digits=10, verbose_name='[ILOF-31] marine growth design thickness')),
                ('platform', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='marine_growths', to='core.platform')),
            ],
        ),
        migrations.CreateModel(
            name='LegPileGrouting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pile_in_leg_installation', models.BooleanField(default=False, verbose_name='[ILOF-6] Pile in leg installation')),
                ('leg_to_pile_annulus_grouted', models.BooleanField(default=False, verbose_name='[ILOF-7] leg to pile annulus grouted')),
                ('platform', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='leg_pile_grouting', to='core.platform')),
            ],
        ),
        migrations.CreateModel(
            name='LastInspection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_underwater_inspection_date', models.DateTimeField(blank=True, null=True, verbose_name='[ILOF-11] last underwater inspection date')),
                ('rbui_inspection_interval', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(limit_value=0)], verbose_name='[ILOF-14] rbui inspection interval (years)')),
                ('platform', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='last_inspection', to='core.platform')),
            ],
        ),
        migrations.CreateModel(
            name='FloodedMember',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number_of_flooded_members_in_last_inspection', models.IntegerField(blank=True, null=True, verbose_name='[ILOF-36] number of flooded members in last inspection')),
                ('flooded_members_last_inspection_date', models.DateTimeField(blank=True, null=True, verbose_name='[ILOF-37] flooded member last inspection date')),
                ('previous_flooded_members_inspection_date', models.DateTimeField(blank=True, null=True, verbose_name='[ILOF-38] previous flooded members inspection date')),
                ('number_of_previous_inspection_flooded_members', models.IntegerField(blank=True, null=True, verbose_name='[ILOF-39] number of previous inspection flooded members')),
                ('platform', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='flooded_member', to='core.platform')),
            ],
        ),
        migrations.CreateModel(
            name='FatigueLoad',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('water_depth', models.DecimalField(decimal_places=5, default=0, max_digits=10, verbose_name='[ILOF-59] water depth (m)')),
                ('platform_with_conductor_guide_frame', models.BooleanField(default=False, verbose_name='[ILOF-60] platform with conductor guide frame (cgf)')),
                ('platform', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='fatigue_load', to='core.platform')),
            ],
        ),
        migrations.CreateModel(
            name='EnvironmentalConsequence',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('daily_oil_production', models.IntegerField(default=0, verbose_name="[ILOF-65] daily oil production (if there is no oil production, input value '0') (bbl)")),
                ('estimated_fraction_of_oil_production_loss_due_to_leakage', models.DecimalField(decimal_places=5, default=0, max_digits=10, null=True, verbose_name='[ILOF-66] estimated fraction of oil production loss due to leakage (%)')),
                ('fixed_cost_for_spill_cleanup', models.DecimalField(decimal_places=5, default=0, max_digits=10, null=True, verbose_name='[ILOF-67] fixed cost for spill clean-up ($)')),
                ('variable_cost_for_spill_cleanup', models.DecimalField(decimal_places=5, default=0, max_digits=10, null=True, verbose_name='[ILOF-68] variable cost for spill clean-up ($/bbl)')),
                ('oil_price', models.DecimalField(decimal_places=5, default=0, max_digits=10, null=True, verbose_name='[ILOF-69] oil price ($/bbl)')),
                ('platform', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='environmental_consequence', to='core.platform')),
                ('platform_type', models.ForeignKey(default=1, on_delete=django.db.models.deletion.DO_NOTHING, to='core.platformtype', verbose_name='[ILOF-64] platform type')),
            ],
        ),
        migrations.CreateModel(
            name='EconomicImpactConsequence',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('daily_gas_production', models.DecimalField(decimal_places=5, default=0, max_digits=10, verbose_name='[ILOF-70] daily gas production (mscf)')),
                ('gas_price', models.DecimalField(decimal_places=5, default=0, max_digits=10, verbose_name='[ILOF-71] gas price ($/mscf)')),
                ('discount_date_for_interrupted_production', models.DecimalField(decimal_places=5, default=0, max_digits=10, verbose_name='[ILOF-72] discount rate for interrupted production (%)')),
                ('fraction_of_remaining_production_loss', models.DecimalField(decimal_places=5, default=100, max_digits=10, verbose_name='[ILOF-73] fraction of remaining production loss (%)')),
                ('platform_replacement_cost', models.DecimalField(decimal_places=5, default=0, max_digits=10, verbose_name='[ILOF-74] platform replacement cost (usd)')),
                ('platform_replacement_time', models.IntegerField(default=0, verbose_name='[ILOF-75] platform replacement time (days)')),
                ('platform', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='economic_impact_consequence', to='core.platform')),
            ],
        ),
        migrations.CreateModel(
            name='DeckLoad',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('original_topsides_design_load_known', models.BooleanField(default=False, verbose_name='[ILOF-44] original topsides design load known')),
                ('increase_in_topsides_load', models.DecimalField(blank=True, decimal_places=5, max_digits=10, null=True, verbose_name='[ILOF-46] increase in topsides load (%)')),
                ('platform', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='deck_load', to='core.platform')),
            ],
        ),
        migrations.CreateModel(
            name='DeckElevationWaveInDeck',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cellar_deck_height', models.DecimalField(blank=True, decimal_places=5, max_digits=10, null=True, verbose_name='[ILOF-48] cellar deck height (m)')),
                ('maximum_wave_height_10_years', models.DecimalField(blank=True, decimal_places=5, max_digits=10, null=True, verbose_name='[ILOF-49] maximum wave height (m) - 10 years')),
                ('storm_surge_10_years', models.DecimalField(blank=True, decimal_places=5, max_digits=10, null=True, verbose_name='[ILOF-50] storm surge (m) - 10 years')),
                ('maximum_wave_height_100_years', models.DecimalField(blank=True, decimal_places=5, max_digits=10, null=True, verbose_name='[ILOF-49] maximum wave height (m) - 100 years')),
                ('storm_surge_100_years', models.DecimalField(blank=True, decimal_places=5, max_digits=10, null=True, verbose_name='[ILOF-50] storm surge (m) - 100 years')),
                ('maximum_wave_height_10000_years', models.DecimalField(blank=True, decimal_places=5, max_digits=10, null=True, verbose_name='[ILOF-49] maximum wave height (m) - 10,000 years')),
                ('storm_surge_10000_years', models.DecimalField(blank=True, decimal_places=5, max_digits=10, null=True, verbose_name='[ILOF-50] storm surge (m) - 10,000 years')),
                ('highest_astronomical_tide', models.DecimalField(blank=True, decimal_places=5, max_digits=10, null=True, verbose_name='[ILOF-51] highest astronomical height (m)')),
                ('crest_height_factor', models.IntegerField(blank=True, null=True, verbose_name='[ILOF-52] crest height factor')),
                ('platform', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='deck_elevation_wave_in_deck', to='core.platform')),
            ],
        ),
        migrations.CreateModel(
            name='Corrosion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('platform_design_life', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(limit_value=1)], verbose_name='[ILOF-17] platform design life (years)')),
                ('cp_design_life', models.IntegerField(blank=True, null=True, verbose_name='[ILOF-19] cp design Life')),
                ('original_anode_installation_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='[ILOF-20] Original anode installation date')),
                ('anode_retrofit_date', models.DateTimeField(blank=True, null=True, verbose_name='[ILOF-22] anode retrofit date')),
                ('anode_survey_inspection_date', models.DateTimeField(blank=True, null=True, verbose_name='[ILOF-24] anode survey/inspection date')),
                ('average_anode_depletion_from_survey', models.DecimalField(blank=True, decimal_places=5, max_digits=10, null=True, verbose_name='[ILOF-25] average anode depletion from survey (%)')),
                ('average_anode_potential_from_survey', models.DecimalField(blank=True, decimal_places=5, max_digits=10, null=True, verbose_name='[ILOF-27] average anode potential from survey (mV)')),
                ('platform', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='corrosion', to='core.platform')),
            ],
        ),
        migrations.CreateModel(
            name='AdditionalAppurtenance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number_of_design_risers', models.IntegerField(default=0, verbose_name='[ILOF-53] number of design risers')),
                ('number_of_design_caissons', models.IntegerField(default=0, verbose_name='[ILOF-54] number of design caissons')),
                ('number_of_design_conductors', models.IntegerField(default=0, verbose_name='[ILOF-55] number of design conductors')),
                ('number_of_additional_risers', models.IntegerField(default=0, verbose_name='[ILOF-56] number of additional risers')),
                ('number_of_additional_caissons', models.IntegerField(default=0, verbose_name='[ILOF-57] number of additional caissons')),
                ('number_of_additional_conductors', models.IntegerField(default=0, verbose_name='[ILOF-58] number of additional conductors')),
                ('platform', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='additional_appurtenance', to='core.platform')),
            ],
        ),
        migrations.AddConstraint(
            model_name='siteownership',
            constraint=models.UniqueConstraint(fields=('user', 'site'), name='unique_site_ownership'),
        ),
        migrations.AddConstraint(
            model_name='projectownership',
            constraint=models.UniqueConstraint(fields=('user', 'project'), name='unique_project_ownership'),
        ),
        migrations.AddConstraint(
            model_name='platformownership',
            constraint=models.UniqueConstraint(fields=('user', 'platform'), name='unique_platform_ownership'),
        ),
        migrations.AddConstraint(
            model_name='floodedmember',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('number_of_flooded_members_in_last_inspection__isnull', True), ('flooded_members_last_inspection_date__isnull', True), ('previous_flooded_members_inspection_date__isnull', True), ('number_of_previous_inspection_flooded_members__isnull', True)), models.Q(('number_of_flooded_members_in_last_inspection__isnull', False), ('flooded_members_last_inspection_date__isnull', False), ('previous_flooded_members_inspection_date__isnull', False), ('number_of_previous_inspection_flooded_members__isnull', False)), _connector='OR'), name='flooded_member_check'),
        ),
        migrations.AddConstraint(
            model_name='deckelevationwaveindeck',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('cellar_deck_height__isnull', True), ('maximum_wave_height_10_years__isnull', True), ('storm_surge_10_years__isnull', True), ('maximum_wave_height_100_years__isnull', True), ('storm_surge_100_years__isnull', True), ('maximum_wave_height_10000_years__isnull', True), ('storm_surge_10000_years__isnull', True), ('highest_astronomical_tide__isnull', True), ('crest_height_factor__isnull', True)), models.Q(('cellar_deck_height__isnull', False), ('maximum_wave_height_10_years__isnull', False), ('storm_surge_10_years__isnull', False), ('maximum_wave_height_100_years__isnull', False), ('storm_surge_100_years__isnull', False), ('maximum_wave_height_10000_years__isnull', False), ('storm_surge_10000_years__isnull', False), ('highest_astronomical_tide__isnull', False), ('crest_height_factor__isnull', False)), _connector='OR'), name='deck_elevation_wave_in_deck_check'),
        ),
        migrations.AddConstraint(
            model_name='corrosion',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('anode_survey_inspection_date__isnull', True), ('average_anode_depletion_from_survey__isnull', True)), models.Q(('anode_survey_inspection_date__isnull', False), ('average_anode_depletion_from_survey__isnull', False)), _connector='OR'), name='anode_depletion_survey_performed'),
        ),
    ]
